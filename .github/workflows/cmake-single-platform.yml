# This starter workflow is for a CMake project running on a single platform. There is a different starter workflow if you need cross-platform coverage.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-multi-platform.yml
name: CMake on a single platform

on:
  push:
    branches: [ "main", "dev/ci-pipeline" ]
    tags:
      - '*'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    branches: [ "dev/ci-pipeline" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  Build:
    permissions: write-all
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main
      with:
        version: 2.4.1

    - name: Conan build
      run: |
        echo "${{ steps.conan.outputs.version }}"
        # mkdir -p /home/runner/.conan2/profiles
        # cp ci.conan.txt /home/runner/.conan2/profiles/default
        # conan install conanfile.py --build=missing --output-folder=build -sbuild_type=Debug
        # cd build
        # cmake -DCMAKE_BUILD_TYPE=Debug ..
        # make -j

    - name: release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: false
#        release_name: ${{ steps.version.outputs.version }}
        release_name: test-release
        tag_name: ${{ github.ref }}
        body_path: CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ github.token }}

    # - name: upload linux artifact
    #   uses: actions/upload-release-asset@v1
    #   env:
    #     GITHUB_TOKEN: ${{ github.token }}
    #   with:
    #     upload_url: ${{ steps.create_release.outputs.upload_url }}
    #     asset_path: ./bin/kp_record
    #     asset_name: kp_record
    #     asset_content_type: application/binary

    # - name: Test
    #   working-directory: ${{github.workspace}}/build
    #   # Execute tests defined by the CMake configuration.
    #   # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
    #   run: ctest -C ${{env.BUILD_TYPE}}

