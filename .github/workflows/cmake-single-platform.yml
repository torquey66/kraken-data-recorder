name: CMake Kraken Data Recorder for GNU/Linux

on:
  push:
    branches:
      - main
      - 'dev/**'
    tags:
      - '*'
env:
  BUILD_TYPE: Release
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:
    permissions: write-all
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Python 3.x
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        mkdir -p ~/.conan2/p

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main
      with:
        version: 2.4.1

    - name: Cache Conan data
      uses: actions/cache@v3
      with:
        path: |
          ~/.conan2/p
        key: ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.txt') }}
        restore-keys: |
          ${{ runner.os }}-conan-

    - name: List Conan Cache Directories
      run: |
          echo "Listing contents of ~/.conan2/p"
          ls -la ~/.conan2/p

    - name: Install dependencies
      run: |
        echo "${{ steps.conan.outputs.version }}"
        mkdir -p /home/runner/.conan2/profiles
        cp ci.conan.txt /home/runner/.conan2/profiles/default
        conan install conanfile.py --build=missing --output-folder=build -sbuild_type=Release

    - name: Build
      run: |
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release ..
        make -j
        ctest

    - name: Get current commit hash
      id: get_commit_hash
      run: |
        COMMIT_HASH=$(git rev-parse --short HEAD)
        echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV

    - name: Release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: false
        release_name: Release-${{ env.COMMIT_HASH }}
        tag_name: v0.0.1-${{ env.COMMIT_HASH }}
        body_path: CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Upload GNU/Linux artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/kdr_record
        asset_name: kdr_record
        asset_content_type: application/binary

  build-and-push-image:
    runs-on: ubuntu-latest

    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to the Container registry
        uses: docker/login-action@65b78e6e13532edd9afa3aa52ac7964289d1a9c1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@9ec57ed1fcdbf14dcef7dfbe97b2010124a938b7
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@f2a1d5e99d037542a71f64918e516c093c6f3fc4
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true
