name: CMake Kraken Data Recorder for GNU/Linux

on:
  push:
    branches:
      - main
      - 'dev/**'
    tags:
      - '*'
env:
  BUILD_TYPE: Release

jobs:
  Build:
    permissions: write-all
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Set up Clang
      run: |
        sudo apt-get update
        sudo apt-get install -y clang clang-tidy

    - name: Set up Python 3.x
      uses: actions/setup-python@v4
      with:
        python-version: '3.x'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        mkdir -p ~/.conan2/p

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main
      with:
        version: 2.4.1

    - name: Cache Conan data
      uses: actions/cache@v3
      with:
        path: |
          ~/.conan2/p
        key: ${{ runner.os }}-conan-${{ hashFiles('**/conanfile.py', '**/ci.conan.txt') }}
        restore-keys: |
          ${{ runner.os }}-conan-

    - name: List Conan Cache Directories
      run: |
          echo "Listing contents of ~/.conan2/p"
          ls -la ~/.conan2/p

    - name: Install dependencies
      run: |
        echo "${{ steps.conan.outputs.version }}"
        mkdir -p /home/runner/.conan2/profiles
        cp ci.conan.txt /home/runner/.conan2/profiles/default
        conan install conanfile.py --build=missing --output-folder=build -sbuild_type=Release

    - name: Build
      run: |
        cd build
        cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_EXPORT_COMPILE_COMMANDS=ON ..
        make -j
        ctest

    - name: Run clang-tidy
      run: |
        cd build
        clang-tidy -header-filter=.* -p=compile_commands.json $(find ../src -name '*.cpp')

    - name: Get current commit hash
      id: get_commit_hash
      run: |
        COMMIT_HASH=$(git rev-parse --short HEAD)
        echo "COMMIT_HASH=${COMMIT_HASH}" >> $GITHUB_ENV

    - name: Release
      uses: actions/create-release@v1
      id: create_release
      with:
        draft: false
        prerelease: false
        release_name: Release-${{ env.COMMIT_HASH }}
        tag_name: v0.0.1-${{ env.COMMIT_HASH }}
        body_path: CHANGELOG.md
      env:
        GITHUB_TOKEN: ${{ github.token }}

    - name: Upload GNU/Linux artifact
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ github.token }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./build/kdr_record
        asset_name: kdr_record
        asset_content_type: application/binary
