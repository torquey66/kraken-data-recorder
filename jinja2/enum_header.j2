{% import "types.j2" as types -%}
/**
 * DO NOT EDIT BY HAND! This is generated code.
 */
#pragma once

#include "types.hpp"

#include <string>
#include <string_view>
#include <unordered_map>

namespace kdr {
namespace model {

{% set classname = class ~ '_t' -%}
{% set cpp_access_type = types.cpp_access_types[class] -%}

{% for enum_value in  enum_values -%}
static constexpr std::string_view c_{{ class }}_{{ enum_value.name }} = "{{ enum_value.name }}";
{% endfor %}

/**
 * {{ doc }}
 */
enum {{ classname }} : {{ type }} {
{% for enum_value in  enum_values -%}
  {{ class }}_{{ enum_value.name }} = {{ enum_value.value }},
{% endfor -%}
};

{{ classname }} str_to_{{ cpp_access_type }}(const std::string& str);
{{ classname }} str_view_to_{{ cpp_access_type }}(std::string_view view);
std::string {{ cpp_access_type }}_to_str({{ classname }} value);

} // model
} // kdr
